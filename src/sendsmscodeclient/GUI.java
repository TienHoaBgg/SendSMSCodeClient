/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sendsmscodeclient;

import io.socket.client.Socket;
import io.socket.emitter.Emitter;
import java.awt.Color;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONException;
import org.json.JSONObject;
import org.smslib.AGateway;
import org.smslib.IOutboundMessageNotification;
import org.smslib.OutboundMessage;
import org.smslib.Service;
import org.smslib.modem.SerialModemGateway;

/**
 *
 * @author Nguyen Tien Hoa
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private SendSMSCodeClient client;
    private List<ItemPort> listPort;
    private List<ItemStatus> listStatuses;
    private int count = 0;
    private Socket socket;

    public GUI() {
        initComponents();
        client = new SendSMSCodeClient();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void setDataTable1(List<ItemPort> list) {
        DefaultTableModel model = (DefaultTableModel) tb_scand.getModel();
        model.setRowCount(0);
        Object[] ob = new Object[3];
        for (int i = 0; i < list.size(); i++) {
            ob[0] = list.get(i).getStt();
            ob[1] = list.get(i).getPort();
            ob[2] = list.get(i).getModel();
            model.addRow(ob);
        }

    }

    private void setDataTableStatus(List<ItemStatus> list) {
        DefaultTableModel model = (DefaultTableModel) tb_status.getModel();
        model.setRowCount(0);
        Object[] ob = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            ob[0] = list.get(i).getStt();
            ob[1] = list.get(i).getModel();
            ob[2] = list.get(i).getReciverID();
            ob[3] = list.get(i).getCode();
            ob[4] = list.get(i).getStatus();
            model.addRow(ob);
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_scand = new javax.swing.JTable();
        btn_save = new javax.swing.JButton();
        btn_scan = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_status = new javax.swing.JTable();
        txt_status = new javax.swing.JLabel();
        tx_status = new javax.swing.JLabel();
        btn_disconnect = new javax.swing.JButton();
        txt_urlSocket = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Send sms very code client");

        tb_scand.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tb_scand.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Com - Port", "Model", "Chooser"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tb_scand.setRowHeight(25);
        jScrollPane1.setViewportView(tb_scand);
        if (tb_scand.getColumnModel().getColumnCount() > 0) {
            tb_scand.getColumnModel().getColumn(0).setMaxWidth(39);
            tb_scand.getColumnModel().getColumn(1).setMaxWidth(150);
            tb_scand.getColumnModel().getColumn(3).setMaxWidth(65);
        }

        btn_save.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btn_save.setText("Save - Connect");
        btn_save.setEnabled(false);
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_scan.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btn_scan.setText("Scan Port");
        btn_scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_scanActionPerformed(evt);
            }
        });

        tb_status.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tb_status.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Model", "ReceiverID", "Code", "Status"
            }
        ));
        tb_status.setRowHeight(25);
        jScrollPane2.setViewportView(tb_status);
        if (tb_status.getColumnModel().getColumnCount() > 0) {
            tb_status.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        txt_status.setFont(new java.awt.Font("Source Sans Pro", 3, 13)); // NOI18N
        txt_status.setForeground(new java.awt.Color(204, 0, 0));

        tx_status.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tx_status.setForeground(new java.awt.Color(204, 0, 0));
        tx_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btn_disconnect.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        btn_disconnect.setText("Disconnect");
        btn_disconnect.setEnabled(false);
        btn_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_disconnectActionPerformed(evt);
            }
        });

        txt_urlSocket.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_urlSocket.setText("http://localhost:2604");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("URL SocketServer : ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_urlSocket, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tx_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btn_scan)
                                .addGap(18, 18, 18)
                                .addComponent(btn_save))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(btn_disconnect)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_status, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tx_status, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_urlSocket, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_scan, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btn_disconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_scanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_scanActionPerformed
        tx_status.setText("Đang scan port device... ");
        btn_scan.setEnabled(false);
        Thread thread = new Thread(() -> {
            listPort = client.getCOMPorts();
            System.out.println("SIZE: " + listPort.size());
            for (int i = 0; i < listPort.size(); i++) {
                listPort.get(i).setModel(client.getModel(listPort.get(i).getPort()));
            }
//            setDataTable1(listPort);

            tx_status.setText("");
            btn_scan.setEnabled(true);
            if (listPort.isEmpty()) {
                btn_save.setEnabled(false);
                JOptionPane.showMessageDialog(this, "Không tìm thấy thiết bị GSM...");
            } else {
                btn_save.setEnabled(true);
            }
        });
        thread.start();

    }//GEN-LAST:event_btn_scanActionPerformed

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        try {

            listStatuses = new ArrayList<>();
            count = 0;
            Boolean check = false;
            for (int i = 0; i < tb_scand.getRowCount(); i++) {
                if (tb_scand.getValueAt(i, 3) != null) {
                    check = Boolean.valueOf(tb_scand.getValueAt(i, 3).toString());
                    String col = tb_scand.getValueAt(i, 0).toString();
                    if (check) {
                        listPort.get(i).setChooser(true);
                    }
                }
            }
            String urlSocket = txt_urlSocket.getText();
            if (urlSocket.trim().equals("")) {

            } else {
                socket = client.connectSocket(urlSocket);
                socket.on("sendOTP", new Emitter.Listener() {
                    @Override
                    public void call(Object... os) {
                        try {
                            String reques = os[0].toString();
                            JSONObject object = new JSONObject(reques);
                            count++;
                            sendSMS(object.getString("phonenumber"), object.getString("code"));
                            setDataTableStatus(listStatuses);
                        } catch (JSONException ex) {
                            System.out.println("Lỗi coverJson " + ex);
                        }
                    }
                });
                if (socket != null) {
                    btn_save.setEnabled(false);
                    btn_disconnect.setEnabled(true);
                    btn_disconnect.setForeground(Color.red);
                    btn_scan.setEnabled(false);

                } else {
                    btn_disconnect.setEnabled(false);
                    btn_disconnect.setForeground(Color.BLACK);
                    btn_scan.setEnabled(true);
                }
            }

        } catch (URISyntaxException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_disconnectActionPerformed

        socket.disconnect();
        btn_disconnect.setEnabled(false);
        btn_save.setEnabled(true);
        btn_scan.setEnabled(true);
    }//GEN-LAST:event_btn_disconnectActionPerformed

    public Boolean sendSMS(String phoneNumber, String code) {
        boolean status = false;
        try {
            ItemStatus status1 = new ItemStatus();
            List<ItemPort> postList = new ArrayList<>();
            for (int i = 0; i < listPort.size(); i++) {
                if (listPort.get(i).isChooser()) {
                    postList.add(listPort.get(i));
                }
            }
            int index = new Random().nextInt(postList.size());
            String port = postList.get(index).getPort();
            String model = postList.get(index).getModel();
            status1.setModel(model);
            status1.setCode(code);
            status1.setReciverID(phoneNumber);
            status1.setStt(count);
            status1.setStatus("Đang gửi tin nhắn");
            listStatuses.add(status1);
            setDataTableStatus(listStatuses);
            OutboundNotification outboundNotification = new OutboundNotification();
            SerialModemGateway gateway = new SerialModemGateway("", port, 9600, "", "");
            gateway.setInbound(true);
            gateway.setOutbound(true);
            gateway.setSmscNumber("+84980200030");
            Service.getInstance().setOutboundMessageNotification(outboundNotification);

            String stats = Service.getInstance().getServiceStatus().toString();
            if ("STOPPED".equals(stats)) {
                Service.getInstance().addGateway(gateway);
                Service.getInstance().startService();
            }
            String message = "Ma xac thuc tai khoan cua ban la " + code;
            OutboundMessage msg = new OutboundMessage(phoneNumber, message);
            status = Service.getInstance().sendMessage(msg);
            if (status) {
                status1.setStatus("Gửi thành công");
                listStatuses.get(count-1).setStatus("Gửi thành công");
            } else {
                status1.setStatus("Gửi thất bại");
                listStatuses.get(count-1).setStatus("Gửi thất bại");
            }
            Service.getInstance().stopService();
            Service.getInstance().removeGateway(gateway);

        } catch (Exception e) {
            listStatuses.get(count-1).setStatus("Request Error");
        }
        return status;
    }

    public class OutboundNotification implements IOutboundMessageNotification {

        public void process(AGateway gateway, OutboundMessage msg) {
            System.out.println("Outbound handler called from Gateway: " + gateway.getGatewayId());
            System.out.println(msg);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_disconnect;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_scan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tb_scand;
    private javax.swing.JTable tb_status;
    private javax.swing.JLabel tx_status;
    private javax.swing.JLabel txt_status;
    private javax.swing.JTextField txt_urlSocket;
    // End of variables declaration//GEN-END:variables
}
